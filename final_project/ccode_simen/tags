!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ComputeDirection	collision_detection.c	/^double ComputeDirection(double xi, double yi, double xj, double yj,double xk, double yk){$/;"	f
ComputeDirection	collision_detection.c	/^double ComputeDirection(double xi, double yi, double xj, double yj,double xk, double yk){$/;"	f	signature:(double xi, double yi, double xj, double yj,double xk, double yk)
FALSE	collision_detection.h	6;"	d
IsOnSegment	collision_detection.c	/^int IsOnSegment(double xi, double yi, double xj, double yj,double xk,double yk){$/;"	f
IsOnSegment	collision_detection.c	/^int IsOnSegment(double xi, double yi, double xj, double yj,double xk,double yk){$/;"	f	signature:(double xi, double yi, double xj, double yj,double xk,double yk)
TRUE	collision_detection.h	9;"	d
_COLLISTION_DETECTION_	collision_detection.h	3;"	d
_COMPUTE_FREE_WS_	compute3LinkFreeWorkspace.h	2;"	d
allocate_memory_polygons	generate_polygons.c	/^void allocate_memory_polygons(struct polygon *obstacle1, struct polygon *obstacle2, struct polygon* link1, $/;"	f
allocate_memory_polygons	generate_polygons.c	/^void allocate_memory_polygons(struct polygon *obstacle1, struct polygon *obstacle2, struct polygon* link1, $/;"	f	signature:(struct polygon *obstacle1, struct polygon *obstacle2, struct polygon* link1, struct polygon* link2,struct polygon* link3)
check_collision	collision_detection.c	/^int check_collision(struct polygon poly1, struct polygon poly2){$/;"	f
check_collision	collision_detection.c	/^int check_collision(struct polygon poly1, struct polygon poly2){$/;"	f	signature:(struct polygon poly1, struct polygon poly2)
check_collision	collision_detection.h	/^	int check_collision(struct polygon poly1,struct polygon poly2);$/;"	p	signature:(struct polygon poly1,struct polygon poly2)
check_if_outside_convex_polygon	collision_detection.c	/^int check_if_outside_convex_polygon(struct point p1, struct polygon poly1){$/;"	f
check_if_outside_convex_polygon	collision_detection.c	/^int check_if_outside_convex_polygon(struct point p1, struct polygon poly1){$/;"	f	signature:(struct point p1, struct polygon poly1)
check_if_segment_intersects	collision_detection.c	/^int check_if_segment_intersects(struct point p11, struct point p12, struct point p21, struct point p22){$/;"	f
check_if_segment_intersects	collision_detection.c	/^int check_if_segment_intersects(struct point p11, struct point p12, struct point p21, struct point p22){$/;"	f	signature:(struct point p11, struct point p12, struct point p21, struct point p22)
compute3LinkFreeWorkspace	compute3LinkFreeWorkspace.c	/^void compute3LinkFreeWorkspace(unsigned int sample_list_length,double **sample_list,double **free_workspace,$/;"	f
compute3LinkFreeWorkspace	compute3LinkFreeWorkspace.c	/^void compute3LinkFreeWorkspace(unsigned int sample_list_length,double **sample_list,double **free_workspace,$/;"	f	signature:(unsigned int sample_list_length,double **sample_list,double **free_workspace, struct point link1BaseRef,struct point link2BaseRef,struct point link3BaseRef, struct polygon link1Poly, struct polygon link2Poly, struct polygon link3Poly, struct polygon *obstacleList, int numberOfObstacles)
displaceLinkPoly	compute3LinkFreeWorkspace.c	/^void displaceLinkPoly(double linkAngle,struct polygon* displacedLink, struct point* displacedLinkEnd, struct point linkBase,$/;"	f
displaceLinkPoly	compute3LinkFreeWorkspace.c	/^void displaceLinkPoly(double linkAngle,struct polygon* displacedLink, struct point* displacedLinkEnd, struct point linkBase,$/;"	f	signature:(double linkAngle,struct polygon* displacedLink, struct point* displacedLinkEnd, struct point linkBase, struct polygon linkReference, struct point linkEndPointReference )
generate_obstacles_and_links	generate_polygons.c	/^void generate_obstacles_and_links( struct polygon* obstacle1, struct polygon* obstacle2, struct polygon* link1, struct polygon* link2, $/;"	f
generate_obstacles_and_links	generate_polygons.c	/^void generate_obstacles_and_links( struct polygon* obstacle1, struct polygon* obstacle2, struct polygon* link1, struct polygon* link2, $/;"	f	signature:( struct polygon* obstacle1, struct polygon* obstacle2, struct polygon* link1, struct polygon* link2, struct polygon* link3, struct point* base1, struct point* base2, struct point* base3)
generate_polygons	collision_detection.c	/^void generate_polygons(struct polygon *p1, struct polygon* p2){$/;"	f
generate_polygons	collision_detection.c	/^void generate_polygons(struct polygon *p1, struct polygon* p2){$/;"	f	signature:(struct polygon *p1, struct polygon* p2)
get_link_data	generate_polygons.c	/^void get_link_data(json_t* linkPolys,json_t* linkBases,struct polygon* link1,struct polygon* link2,struct polygon* link3,$/;"	f
get_link_data	generate_polygons.c	/^void get_link_data(json_t* linkPolys,json_t* linkBases,struct polygon* link1,struct polygon* link2,struct polygon* link3,$/;"	f	signature:(json_t* linkPolys,json_t* linkBases,struct polygon* link1,struct polygon* link2,struct polygon* link3, struct point* base1,struct point* base2,struct point* base3)
get_obstacle_data	generate_polygons.c	/^void get_obstacle_data(json_t* obstacles,struct polygon* obstacle1,struct polygon* obstacle2,struct polygon* obstacle3){$/;"	f
get_obstacle_data	generate_polygons.c	/^void get_obstacle_data(json_t* obstacles,struct polygon* obstacle1,struct polygon* obstacle2,struct polygon* obstacle3){$/;"	f	signature:(json_t* obstacles,struct polygon* obstacle1,struct polygon* obstacle2,struct polygon* obstacle3)
initTempPolys	compute3LinkFreeWorkspace.c	/^initTempPolys(struct polygon link1Poly, struct polygon link2Poly, struct polygon link3Poly,$/;"	f
initTempPolys	compute3LinkFreeWorkspace.c	/^initTempPolys(struct polygon link1Poly, struct polygon link2Poly, struct polygon link3Poly,$/;"	f	signature:(struct polygon link1Poly, struct polygon link2Poly, struct polygon link3Poly, struct polygon* displacedLink1 , struct polygon* displacedLink2, struct polygon* displacedLink3 )
main	compute3LinkFreeWorkspace.c	/^int main(){$/;"	f
main	generate_polygons.c	/^int main(){$/;"	f
main	runTests.c	/^int main(){$/;"	f
numberOfVertices	collision_detection.h	/^		int numberOfVertices;$/;"	m	struct:polygon
point	collision_detection.h	/^	struct point{$/;"	s
polygon	collision_detection.h	/^	struct polygon{$/;"	s
rotateVector	compute3LinkFreeWorkspace.c	/^void rotateVector(double linkAngle, double* x, double* y){$/;"	f
rotateVector	compute3LinkFreeWorkspace.c	/^void rotateVector(double linkAngle, double* x, double* y){$/;"	f	signature:(double linkAngle, double* x, double* y)
x	collision_detection.h	/^		double x;$/;"	m	struct:point
x_list	collision_detection.h	/^		double *x_list;$/;"	m	struct:polygon
y	collision_detection.h	/^		double y;$/;"	m	struct:point
y_list	collision_detection.h	/^		double *y_list;	$/;"	m	struct:polygon
